package de.jensklingenberg.ktorfit.requestData

import de.jensklingenberg.ktorfit.generator.generateKtorfitExtSource

import de.jensklingenberg.ktorfit.model.MyClass
import de.jensklingenberg.ktorfit.model.MyFunction
import de.jensklingenberg.ktorfit.model.MyParam
import de.jensklingenberg.ktorfit.model.MyType
import de.jensklingenberg.ktorfit.model.annotations.Field
import de.jensklingenberg.ktorfit.model.annotations.FieldMap
import de.jensklingenberg.ktorfit.model.annotations.HttpMethod
import de.jensklingenberg.ktorfit.model.annotations.HttpMethodAnnotation
import de.jensklingenberg.ktorfit.model.annotations.Part
import de.jensklingenberg.ktorfit.model.annotations.PartMap
import org.junit.Assert
import org.junit.Test

class GeneratorTest {

    @Test
    fun testGetFunctionText() {

        val myFunction = MyFunction(
            name = "getTest",
            returnType = MyType("Int", "kotlin.Int"),
            isSuspend = true,
            params = emptyList(),
            annotations = emptyList(),
            httpMethodAnnotation = HttpMethodAnnotation("posts", HttpMethod.GET)
        )

        val expected = """override suspend fun getTest(): Int {
                    val requestData = RequestData(method="GET", relativeUrl="posts", qualifiedRawTypeName="kotlin.Int") 
 return client.suspendRequest<Int, Int>(requestData)
                }
                """

        val funcText = ""
        Assert.assertEquals(expected, funcText)
    }

    @Test
    fun testParamWithFieldMap() {

        val myFunction = MyFunction(
            name = "getPosts",
            returnType = MyType("List<Post>", "kotlin.List"),
            isSuspend = true,
            params = listOf(
                MyParam(
                    "map", MyType("Map<String,String>", "Map<String,String>"), listOf(
                        FieldMap(
                            encoded = false
                        )
                    )
                ),
                MyParam(
                    "fieldParam", MyType("String", "String"), listOf(
                        Field("fieldParam"),
                    )
                )
            ),
            annotations = emptyList(),
            httpMethodAnnotation = HttpMethodAnnotation("example", HttpMethod.GET)
        )

        val expected = """override suspend fun getPosts(map:Map<String,String>, fieldParam:String): List<Post> {
                    val requestData = RequestData(method="GET", relativeUrl="example", fields = mapOf("fieldParam" to client.encode("\$\{fieldParam}"))+map, qualifiedRawTypeName="kotlin.List") 
 return client.suspendRequest<List<Post>, Post>(requestData)
                }
                """

        val funcText = ""
        Assert.assertEquals(expected, funcText)
    }


    @Test
    fun testKtorfitExtGeneration() {

        val myClass = listOf(
            MyClass("Test1","com.example", emptyList(), listOf(""), emptyList()),
            MyClass("Test2","com.example", emptyList(),listOf(""), emptyList())
        )
       val source =  generateKtorfitExtSource(myClass,false)


        val expected = """//Generated by Ktorfit 
package de.jensklingenberg.ktorfit
import com.example._Test1Impl
import com.example.Test1
import com.example._Test2Impl
import com.example.Test2
inline fun <reified T> Ktorfit.create(): T{
return when(T::class.qualifiedName){
Test1::class.qualifiedName->{
          _Test1Impl(KtorfitClient(this)) as T
}
Test2::class.qualifiedName->{
          _Test2Impl(KtorfitClient(this)) as T
}
else -> {
throw IllegalArgumentException("Could not find any Ktorfit annotations in class "+ T::class.qualifiedName  )
}}}"""


        Assert.assertEquals(expected, source)
    }


    @Test
    fun dodo(){

        val actual = PartsArgumentNode(listOf(MyParam(
            "fieldParam", MyType("String", "String"), listOf(
                Part("hallo"),
            )
        ),MyParam(
            "fieldParam2", MyType("String", "String"), listOf(
                PartMap(),
            )
        ))).toString()


        val expected = "parts = mapOf(\"hallo\" to fieldParam)+fieldParam2"
        Assert.assertEquals(expected,actual)
    }

}
